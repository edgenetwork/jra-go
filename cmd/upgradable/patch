diff -r 920e9d1ffd1f src/pkg/net/fd.go
--- a/src/pkg/net/fd.go	Wed Mar 28 23:41:59 2012 +1100
+++ b/src/pkg/net/fd.go	Tue May 29 16:46:18 2012 +0200
@@ -632,7 +632,7 @@
 		}
 		break
 	}
-	syscall.CloseOnExec(s)
+	syscall.CloseOnExec(uintptr(s))
 	syscall.ForkLock.RUnlock()
 
 	if netfd, err = newFD(s, fd.family, fd.sotype, fd.net); err != nil {
diff -r 920e9d1ffd1f src/pkg/net/fd_linux.go
--- a/src/pkg/net/fd_linux.go	Wed Mar 28 23:41:59 2012 +1100
+++ b/src/pkg/net/fd_linux.go	Tue May 29 16:46:18 2012 +0200
@@ -45,7 +45,7 @@
 		if p.epfd, err = syscall.EpollCreate(16); err != nil {
 			return nil, os.NewSyscallError("epoll_create", err)
 		}
-		syscall.CloseOnExec(p.epfd)
+		syscall.CloseOnExec(uintptr(p.epfd))
 	}
 	p.events = make(map[int]uint32)
 	return p, nil
diff -r 920e9d1ffd1f src/pkg/net/sock.go
--- a/src/pkg/net/sock.go	Wed Mar 28 23:41:59 2012 +1100
+++ b/src/pkg/net/sock.go	Tue May 29 16:46:18 2012 +0200
@@ -24,7 +24,7 @@
 		syscall.ForkLock.RUnlock()
 		return nil, err
 	}
-	syscall.CloseOnExec(s)
+	syscall.CloseOnExec(uintptr(s))
 	syscall.ForkLock.RUnlock()
 
 	err = setDefaultSockopts(s, f, t, ipv6only)
diff -r 920e9d1ffd1f src/pkg/os/file_unix.go
--- a/src/pkg/os/file_unix.go	Wed Mar 28 23:41:59 2012 +1100
+++ b/src/pkg/os/file_unix.go	Tue May 29 16:46:18 2012 +0200
@@ -76,7 +76,7 @@
 	// runtime, we just always call syscall.CloseOnExec on Darwin.
 	// Once >=10.7 is prevalent, this extra call can removed.
 	if syscall.O_CLOEXEC == 0 || runtime.GOOS == "darwin" { // O_CLOEXEC not supported
-		syscall.CloseOnExec(r)
+		syscall.CloseOnExec(uintptr(r))
 	}
 
 	return NewFile(uintptr(r), name), nil
@@ -275,8 +275,8 @@
 		syscall.ForkLock.RUnlock()
 		return nil, nil, NewSyscallError("pipe", e)
 	}
-	syscall.CloseOnExec(p[0])
-	syscall.CloseOnExec(p[1])
+	syscall.CloseOnExec(uintptr(p[0]))
+	syscall.CloseOnExec(uintptr(p[1]))
 	syscall.ForkLock.RUnlock()
 
 	return NewFile(uintptr(p[0]), "|0"), NewFile(uintptr(p[1]), "|1"), nil
diff -r 920e9d1ffd1f src/pkg/syscall/exec_unix.go
--- a/src/pkg/syscall/exec_unix.go	Wed Mar 28 23:41:59 2012 +1100
+++ b/src/pkg/syscall/exec_unix.go	Tue May 29 16:46:18 2012 +0200
@@ -74,7 +74,11 @@
 	return bb
 }
 
-func CloseOnExec(fd int) { fcntl(fd, F_SETFD, FD_CLOEXEC) }
+// Set the close-on-exec flag for this file descriptor.
+func CloseOnExec(fd uintptr) { fcntl(int(fd), F_SETFD, FD_CLOEXEC) }
+
+// Clear the close-on-exec flag for this file descriptor.
+func NoCloseOnExec(fd uintptr) { fcntl(int(fd), F_SETFD, ^FD_CLOEXEC) }
 
 func SetNonblock(fd int, nonblocking bool) (err error) {
 	flag, err := fcntl(fd, F_GETFL, 0)
