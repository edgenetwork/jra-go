This is a console server, like the one at http://conserver.com.

(the following was stolen from conserver.com and edited to suit...)

Gocons is an application that allows multiple users to watch
a serial console at the same time. It can log the data, allows
users to take write-access of a console (one at a time).

The idea is that gocons server will log all your serial traffic
so you can go back and review why something crashed, look at
changes (if done on the console), or tie the console logs into
a monitoring system (just watch the logfiles it creates). With
multi-user capabilities you can work on equipment with others,
mentor, train, etc. It also does all that client-server stuff
so that, assuming you have a network connection, you can
interact with any of the equipment from home or wherever.

Gocons lacks many of the features found in conserver. Gocons
was written as an experiment in using Go for applications like
conserver, where the need is to monitor and dispatch between many
TCP connections, via a custom protocol. If you find it useful
and ask for more features, I'd implement them if (a) you pay me <wink>
or (b) it helps me learn more Go.

Jeff R. Allen
<jra@nella.org>

Build:
  gomake install

Run:
  goconserver [ -fake ] -config config.js
    See the configuration section below for how to configure it.

  goconsole <console-name>
    Inside of goconsole, the escape key is ctrl-A. Once you press it,
    goconsole is listening for commands directly from you. Hit ? for help.
    Otherwise, all characters you type will be sent to the console,
    if you are the writer for the console.

Configuration:
  config.js should be a file in JSON-format. The top level object
  is a hash:

    consoles: a hash:
        keys: names of the consoles
        values: strings, of the form expected by net.Dial
      This is the list of RTelnet consoles that goconserver will
      attempt to connect to and monitor. The names can be used on the
      commandline of goconsole.

  Any other keys in the top level hash are ignored.

Fake server:
  For testing when you don't have an RTelnet server available,
  specify -fake to the server. It will add an extra console to the
  config called "fake", which just echos back everything you type
  to it. 

License:
  Copyright 2009 Jeff R. Allen. All rights reserved.
  Use of this source code is governed by a BSD-style
  license that can be found in the LICENSE file of the Go
  distribution.

